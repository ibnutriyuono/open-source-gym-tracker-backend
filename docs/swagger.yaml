basePath: /api/v1
definitions:
  model.Exercise:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  model.User:
    properties:
      avatar:
        description: URL to avatar image
        type: string
      banned_at:
        description: only if banned
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        maxLength: 255
        minLength: 2
        type: string
      gender:
        enum:
        - male
        - female
        - other
        type: string
      id:
        type: string
      is_banned:
        type: boolean
      is_deleted:
        description: soft delete timestamp
        type: boolean
      is_verified:
        type: boolean
      last_name:
        maxLength: 255
        minLength: 2
        type: string
      month_of_birth:
        type: string
      password:
        description: bcrypt password; strong password
        type: string
      phone_number:
        description: E.164 phone format
        type: string
      verified_at:
        type: string
      workout_routines:
        items:
          $ref: '#/definitions/model.WorkoutRoutine'
        type: array
      year_of_birth:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  model.WorkoutRoutine:
    properties:
      created_at:
        type: string
      exercises:
        items:
          $ref: '#/definitions/model.Exercise'
        type: array
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  response.JSONResponse:
    properties:
      data: {}
      meta:
        $ref: '#/definitions/response.Meta'
    type: object
  response.Meta:
    properties:
      message:
        type: string
      status_code:
        type: integer
      success:
        type: boolean
    type: object
  user.AccessTokenResponse:
    properties:
      access_token:
        type: string
    type: object
  user.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  user.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API for Caloria app
  title: Caloria API
  version: "1.0"
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Get health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get health
      tags:
      - health
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided data
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONResponse'
      summary: Create new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user with specified ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONResponse'
      summary: Delete user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get details of user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONResponse'
      summary: Update user by ID
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Refresh Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/user.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - users
  /users/refresh-token:
    post:
      consumes:
      - application/json
      description: Get new access token using refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/user.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AccessTokenResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Refresh JWT token
      tags:
      - users
swagger: "2.0"
